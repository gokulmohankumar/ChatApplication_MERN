import { useEffect, useRef, useState } from 'react';
import { IoArrowBackOutline, IoHappyOutline, IoInformationCircleOutline, IoPeople, IoPerson, IoSend } from 'react-icons/io5';
import API from '../../api/api';
import { getSender, getSenderFull, isLastMessage, isSameSender } from '../../config/ChatLogic';
import { ChatState } from '../../context/ChatProvider';
import ChatInfoModal from '../modals/ChatInfoModal';

import io from 'socket.io-client';
const ENDPOINT = "http://localhost:5100";
let socket;

const SingleChat = ({ fetchAgain, setFetchAgain }) => {
Â  const { user, selectedChat, setSelectedChat, notification, setNotification } = ChatState();
Â  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false);
Â  const [loading, setLoading] = useState(false);
Â  const [messages, setMessages] = useState([]);
Â  const [newMessage, setNewMessage] = useState("");
Â  const [typing, setTyping] = useState(false);
Â  const [isTyping, setIsTyping] = useState(false);
Â  const [socketConnected, setSocketConnected] = useState(false);
Â  const messagesEndRef = useRef(null);
Â  const typingTimeoutRef = useRef(null);


Â  const handleInfoClick = () => setIsInfoModalOpen(true);

Â  const scrollToBottom = () => {
Â  Â  messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
Â  };

Â  useEffect(() => {
Â  Â  socket = io(ENDPOINT);
Â  Â  socket.emit("setup", user);
Â  Â  socket.on("connected", () => setSocketConnected(true));
Â  Â  socket.on("typing", () => setIsTyping(true));
Â  Â  socket.on("stop typing", () => setIsTyping(false));
Â  Â  return () => {
Â  Â  Â  socket.disconnect();
Â  Â  };
Â  }, [user]);

Â  const fetchMessages = async () => {
Â  Â  if (!selectedChat) return;
Â  Â  try {
Â  Â  Â  setLoading(true);
Â  Â  Â  const config = {
Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  "Content-type": "application/json",
Â  Â  Â  Â  Â  Authorization: `Bearer ${user.token}`,
Â  Â  Â  Â  },
Â  Â  Â  };
Â  Â  Â  const { data } = await API.get(`/message/${selectedChat._id}`, config);
Â  Â  Â  setMessages(data);
Â  Â  Â  setLoading(false);
Â  Â  Â  socket.emit("join chat", selectedChat._id);
Â  Â  } catch (error) {
Â  Â  Â  console.error("Error in fetching messages:", error);
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  const sendMessage = async (event) => {
Â  Â  if (newMessage.trim() === "") return;
Â  Â  if (event.key === "Enter" || event.type === 'click') {
Â  Â  Â  try {
Â  Â  Â  Â  const config = {
Â  Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  Â  "Content-type": "application/json",
Â  Â  Â  Â  Â  Â  Authorization: `Bearer ${user.token}`,
Â  Â  Â  Â  Â  },
Â  Â  Â  Â  };
Â  Â  Â  Â  const messageToSend = newMessage;
Â  Â  Â  Â  setNewMessage("");
Â  Â  Â  Â  const { data } = await API.post(
Â  Â  Â  Â  Â  "/message",
Â  Â  Â  Â  Â  { content: messageToSend, chatId: selectedChat._id },
Â  Â  Â  Â  Â  config
Â  Â  Â  Â  );
Â  Â  Â  Â  socket.emit("new message", data);
Â  Â  Â  Â  setMessages([...messages, data]);
Â  Â  Â  Â  setFetchAgain(!fetchAgain);
Â  Â  Â  Â  if (typingTimeoutRef.current) clearTimeout(typingTimeoutRef.current);
Â  Â  Â  Â  setTyping(false);
Â  Â  Â  Â  socket.emit("stop typing", selectedChat._id);
Â  Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Error sending message:", error);
Â  Â  Â  }
Â  Â  }
Â  };

Â  const typingHandler = (e) => {
Â  Â  setNewMessage(e.target.value);
Â  Â  if (!socketConnected) return;

Â  Â  if (!typing) {
Â  Â  Â  setTyping(true);
Â  Â  Â  socket.emit("typing", selectedChat._id);
Â  Â  }

Â  Â  if (typingTimeoutRef.current) clearTimeout(typingTimeoutRef.current);
Â  Â  typingTimeoutRef.current = setTimeout(() => {
Â  Â  Â  socket.emit("stop typing", selectedChat._id);
Â  Â  Â  setTyping(false);
Â  Â  }, 2000);
Â  };

Â  const handleEmojiClick = () => setNewMessage(prev => prev + 'ðŸ˜Š');

Â  const formatTimeAgo = (timestamp) => {
Â  Â  const now = new Date();
Â  Â  const messageTime = new Date(timestamp);
Â  Â  const seconds = Math.floor((now - messageTime) / 1000);
Â  Â  const minutes = Math.floor(seconds / 60);
Â  Â  const hours = Math.floor(minutes / 60);

Â  Â  if (seconds < 60) return "just now";
Â  Â  if (minutes < 60) return `${minutes} min${minutes > 1 ? 's' : ''} ago`;
Â  Â  if (hours < 24) return `${hours} hour${hours > 1 ? 's' : ''} ago`;
Â  Â  return messageTime.toLocaleDateString();
Â  };

Â  useEffect(() => {
Â  Â  if (!socket) return;
Â  Â  fetchMessages();
Â  Â  
Â  Â  const messageHandler = (newMessageRecieved) => {
Â  Â  Â  if (selectedChat && selectedChat._id === newMessageRecieved.chat._id) {
Â  Â  Â  Â  setMessages(prevMessages => [...prevMessages, newMessageRecieved]);
Â  Â  Â  } else {
Â  Â  Â  Â  if (!notification.includes(newMessageRecieved)) {
Â  Â  Â  Â  Â  setNotification([newMessageRecieved, ...notification]);
Â  Â  Â  Â    setFetchAgain(!fetchAgain);
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  };
Â  Â  socket.on("message recieved", messageHandler);

Â  Â  return () => {
Â  Â  Â  socket.off("message recieved", messageHandler);
Â  Â  };
Â  }, [selectedChat, fetchAgain]);

Â  useEffect(() => {
Â  Â  scrollToBottom();
Â  }, [messages]);

Â  return (
Â  Â  <div className="flex flex-col h-screen min-h-0 w-full">
Â  Â  Â  {selectedChat ? (
Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  {/* Header (sticky) */}
Â  Â  Â  Â  Â  <div className="sticky top-0 z-10 flex justify-between items-center p-4 bg-white shadow-md">
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={() => setSelectedChat("")}
Â  Â  Â  Â  Â  Â  Â  className="md:hidden p-2 rounded-md hover:bg-gray-200 transition-colors"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <IoArrowBackOutline size={24} />
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-3">
Â  Â  Â  Â  Â  Â  Â  {selectedChat.isGroupChat ? (
Â  Â  Â  Â  Â  Â  Â  Â  selectedChat.groupChatPicture ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <img src={selectedChat.groupChatPicture} alt={selectedChat.chatName} className="w-10 h-10 rounded-full object-cover" />
Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="w-10 h-10 rounded-full bg-indigo-500 flex items-center justify-center text-white">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <IoPeople size={24} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  getSenderFull(user, selectedChat.users).pic ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <img src={getSenderFull(user, selectedChat.users).pic} alt={getSenderFull(user, selectedChat.users).name} className="w-10 h-10 rounded-full object-cover" />
Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="w-10 h-10 rounded-full bg-indigo-500 flex items-center justify-center text-white">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <IoPerson size={24} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  <h3 className="text-lg font-semibold">
Â  Â  Â  Â  Â  Â  Â  Â  {!selectedChat.isGroupChat ? getSender(user, selectedChat.users) : selectedChat.chatName}
Â  Â  Â  Â  Â  Â  Â  </h3>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <button onClick={handleInfoClick} className="p-2 rounded-full hover:bg-gray-200 transition-colors">
Â  Â  Â  Â  Â  Â  Â  <IoInformationCircleOutline size={24} className="text-gray-600" />
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  {/* Messages (scrollable) */}
Â  Â  Â  Â  Â  <div className="flex-1 overflow-y-auto p-4 bg-gray-50">
Â  Â  Â  Â  Â  Â  {loading ? (
Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-center items-center h-full">
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-500">Loading messages...</p>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  <div className="flex flex-col space-y-2">
Â  Â  Â  Â  Â  Â  Â  Â  {messages.length > 0 ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  messages.map((message, index) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={message._id}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`flex items-end space-x-2 ${message.sender._id === user._id ? 'justify-end' : 'justify-start'}`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {message.sender._id !== user._id && (isLastMessage(messages, index, user._id) || isSameSender(messages, message, index, user._id)) ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  message.sender.pic ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <img src={message.sender.pic} alt={message.sender.name} className="w-8 h-8 rounded-full object-cover self-end" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="w-8 h-8 rounded-full bg-indigo-500 flex items-center justify-center text-white self-end">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <IoPerson size={18} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="w-8 h-8 self-end" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`max-w-xs p-3 rounded-lg shadow-md flex flex-col ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  message.sender._id === user._id
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? 'bg-blue-500 text-white rounded-br-none'
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : 'bg-violet-200 text-gray-800 rounded-bl-none'
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {selectedChat.isGroupChat && message.sender._id !== user._id && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-xs text-gray-400 mb-1">{message.sender.name}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="flex-1 whitespace-pre-wrap">{message.content}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className={`text-xs ml-2 whitespace-nowrap mt-1 ${message.sender._id === user._id ? 'text-blue-200' : 'text-gray-500'}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {formatTimeAgo(message.createdAt)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  ))
Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex flex-col items-center justify-center h-full text-gray-500">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p>Start a conversation...</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  <div ref={messagesEndRef} />
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  {isTyping && (
Â  Â  Â  Â  Â  Â  <div className="p-2 ml-4 self-start text-sm text-gray-500">
Â  Â  Â  Â  Â  Â  Â  <div className="typing-indicator flex items-center space-x-1">
Â  Â  Â  Â  Â  Â  Â  Â  <span className="w-1 h-1 bg-green-400 rounded-full animate-pulse-slow">typing .</span>
Â  Â  Â  Â  Â  Â  Â  Â  <span className="w-1 h-1 bg-green-400 rounded-full animate-pulse-slow animation-delay-200"></span>
Â  Â  Â  Â  Â  Â  Â  Â  <span className="w-1 h-1 bg-green-400 rounded-full animate-pulse-slow animation-delay-400"></span>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  <style>{`
Â  Â  Â  Â  Â  Â  @keyframes pulse-slow {
Â  Â  Â  Â  Â  Â  Â  0%, 100% { opacity: 0.3; }
Â  Â  Â  Â  Â  Â  Â  50% { opacity: 1; }
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  .animate-pulse-slow {
Â  Â  Â  Â  Â  Â  Â  animation: pulse-slow 1.5s cubic-bezier(0.4, 0, 0.6, 1) infinite;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  .animation-delay-200 { animation-delay: 200ms; }
Â  Â  Â  Â  Â  Â  .animation-delay-400 { animation-delay: 400ms; }
Â  Â  Â  Â  Â  `}</style>
Â  Â  Â  Â  Â  <div className="sticky bottom-0 z-10 p-4 bg-white-300 shadow-md ">
Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-2">
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  onClick={handleEmojiClick}
Â  Â  Â  Â  Â  Â  Â  Â  className="p-2 rounded-full hover:bg-gray-200 transition-colors"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <IoHappyOutline size={24} />
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Type a message..."
Â  Â  Â  Â  Â  Â  Â  Â  onKeyDown={sendMessage}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={typingHandler}
Â  Â  Â  Â  Â  Â  Â  Â  value={newMessage}
Â  Â  Â  Â  Â  Â  Â  Â  className="flex-1 p-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  onClick={sendMessage}
Â  Â  Â  Â  Â  Â  Â  Â  className="p-2 bg-blue-500 text-white rounded-full hover:bg-blue-600 transition-colors"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <IoSend size={24} />
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </>
Â  Â  Â  ) : (
Â  Â  Â  Â  <div className="flex flex-col items-center justify-center h-screen text-gray-500 bg-gray-100 p-8 rounded-lg shadow-inner">
Â  Â  Â  Â  Â  <div className="text-4xl font-extrabold text-blue-600 mb-4">G_CHAT</div>
Â  Â  Â  Â  Â  <p className="text-xl font-semibold">Click on a user to start chatting</p>
Â  Â  Â  Â  </div>
Â  Â  Â  )}

Â  Â  Â  {isInfoModalOpen && (
Â  Â  Â  Â  <ChatInfoModal
Â  Â  Â  Â  Â  isOpen={isInfoModalOpen}
Â  Â  Â  Â  Â  onClose={() => setIsInfoModalOpen(false)}
Â  Â  Â  Â  />
Â  Â  Â  )}
Â  Â  </div>
Â  );
};

export default SingleChat;
